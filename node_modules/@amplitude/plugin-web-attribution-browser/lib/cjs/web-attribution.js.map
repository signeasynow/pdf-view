{"version":3,"file":"web-attribution.js","sourceRoot":"","sources":["../../src/web-attribution.ts"],"names":[],"mappings":";;;AAAA,8EAAoE;AAEpE,qCAA2G;AAE3G,8EAAkE;AAE3D,IAAM,oBAAoB,GAA+B,UAAU,OAAqB;IAA/B,iBAyC/D;IAzCyE,wBAAA,EAAA,YAAqB;IAC7F,IAAM,MAAM,GAAiB;QAC3B,IAAI,EAAE,2CAA2C;QACjD,IAAI,EAAE,QAAQ;QAEd,KAAK,EAAE,UAAgB,MAAqB,EAAE,SAAwB;;;;;;;4BAC9D,YAAY,sBAChB,iBAAiB,EAAE,OAAO,EAC1B,yBAAyB,EAAE,KAAK,EAChC,gBAAgB,EAAE,IAAA,qCAA2B,EAAC,MAAA,MAAM,CAAC,aAAa,0CAAE,MAAM,CAAC,IACxE,OAAO,CACX,CAAC;4BACF,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;4BAG7E,OAAO,GAAG,MAAM,CAAC,aAA6C,CAAC;4BAC/D,UAAU,GAAG,IAAA,uBAAa,EAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;4BAEZ,qBAAM,OAAO,CAAC,GAAG,CAAC;oCAC5D,IAAI,wCAAc,EAAE,CAAC,KAAK,EAAE;oCAC5B,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;iCACxB,CAAC,EAAA;;4BAHI,KAAA,8BAAsC,SAG1C,KAAA,EAHK,eAAe,QAAA,EAAE,gBAAgB,QAAA;4BAKlC,mBAAmB,GAAG,IAAA,sCAAY,EAAC,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;4BAEtF,IAAI,IAAA,uBAAa,EAAC,eAAe,EAAE,gBAAgB,EAAE,YAAY,EAAE,mBAAmB,CAAC,EAAE;gCACvF,IAAI,YAAY,CAAC,yBAAyB,EAAE;oCAC1C,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;oCACnC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;iCACtE;gCACD,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;gCAC7C,aAAa,GAAG,IAAA,6BAAmB,EAAC,eAAe,EAAE,YAAY,CAAC,CAAC;gCACzE,SAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;gCAC/B,KAAK,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;6BAC/C;;;;;SACF;QAED,OAAO,EAAE,UAAO,KAAY;YAAK,sBAAA,KAAK,EAAA;iBAAA;KACvC,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAzCW,QAAA,oBAAoB,wBAyC/B","sourcesContent":["import { CampaignParser } from '@amplitude/analytics-client-common';\nimport { BeforePlugin, BrowserClient, BrowserConfig, Campaign, Event, Storage } from '@amplitude/analytics-types';\nimport { createCampaignEvent, getDefaultExcludedReferrers, getStorageKey, isNewCampaign } from './helpers';\nimport { CreateWebAttributionPlugin, Options } from './typings/web-attribution';\nimport { isNewSession } from '@amplitude/analytics-client-common';\n\nexport const webAttributionPlugin: CreateWebAttributionPlugin = function (options: Options = {}) {\n  const plugin: BeforePlugin = {\n    name: '@amplitude/plugin-web-attribution-browser',\n    type: 'before',\n\n    setup: async function (config: BrowserConfig, amplitude: BrowserClient) {\n      const pluginConfig = {\n        initialEmptyValue: 'EMPTY',\n        resetSessionOnNewCampaign: false,\n        excludeReferrers: getDefaultExcludedReferrers(config.cookieOptions?.domain),\n        ...options,\n      };\n      config.loggerProvider.log('Installing @amplitude/plugin-web-attribution-browser.');\n\n      // Share cookie storage with user session storage\n      const storage = config.cookieStorage as unknown as Storage<Campaign>;\n      const storageKey = getStorageKey(config.apiKey, 'MKTG');\n\n      const [currentCampaign, previousCampaign] = await Promise.all([\n        new CampaignParser().parse(),\n        storage.get(storageKey),\n      ]);\n\n      const isEventInNewSession = isNewSession(config.sessionTimeout, config.lastEventTime);\n\n      if (isNewCampaign(currentCampaign, previousCampaign, pluginConfig, isEventInNewSession)) {\n        if (pluginConfig.resetSessionOnNewCampaign) {\n          amplitude.setSessionId(Date.now());\n          config.loggerProvider.log('Created a new session for new campaign.');\n        }\n        config.loggerProvider.log('Tracking attribution.');\n        const campaignEvent = createCampaignEvent(currentCampaign, pluginConfig);\n        amplitude.track(campaignEvent);\n        void storage.set(storageKey, currentCampaign);\n      }\n    },\n\n    execute: async (event: Event) => event,\n  };\n\n  return plugin;\n};\n"]}