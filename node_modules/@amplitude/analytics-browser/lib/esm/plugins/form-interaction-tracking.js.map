{"version":3,"file":"form-interaction-tracking.js","sourceRoot":"","sources":["../../../src/plugins/form-interaction-tracking.ts"],"names":[],"mappings":"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","sourcesContent":["import { BrowserClient, Event, EnrichmentPlugin } from '@amplitude/analytics-types';\nimport {\n  DEFAULT_FORM_START_EVENT,\n  DEFAULT_FORM_SUBMIT_EVENT,\n  FORM_ID,\n  FORM_NAME,\n  FORM_DESTINATION,\n} from '../constants';\nimport { BrowserConfig } from '../config';\n\ninterface EventListener {\n  element: Element;\n  type: 'change' | 'submit';\n  handler: () => void;\n}\n\nexport const formInteractionTracking = (): EnrichmentPlugin => {\n  let observer: MutationObserver | undefined;\n  let eventListeners: EventListener[] = [];\n\n  const addEventListener = (element: Element, type: 'change' | 'submit', handler: () => void) => {\n    element.addEventListener(type, handler);\n    eventListeners.push({\n      element,\n      type,\n      handler,\n    });\n  };\n\n  const removeClickListeners = () => {\n    eventListeners.forEach(({ element, type, handler }) => {\n      /* istanbul ignore next */\n      element?.removeEventListener(type, handler);\n    });\n    eventListeners = [];\n  };\n\n  const name = '@amplitude/plugin-form-interaction-tracking-browser';\n  const type = 'enrichment';\n  const setup = async (config: BrowserConfig, amplitude: BrowserClient) => {\n    /* istanbul ignore if */\n    if (!amplitude) {\n      // TODO: Add required minimum version of @amplitude/analytics-browser\n      config.loggerProvider.warn(\n        'Form interaction tracking requires a later version of @amplitude/analytics-browser. Form interaction events are not tracked.',\n      );\n      return;\n    }\n\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const addFormInteractionListener = (form: HTMLFormElement) => {\n      let hasFormChanged = false;\n\n      addEventListener(form, 'change', () => {\n        if (!hasFormChanged) {\n          amplitude.track(DEFAULT_FORM_START_EVENT, {\n            [FORM_ID]: form.id,\n            [FORM_NAME]: stringOrUndefined(form.name),\n            [FORM_DESTINATION]: form.action,\n          });\n        }\n        hasFormChanged = true;\n      });\n\n      addEventListener(form, 'submit', () => {\n        if (!hasFormChanged) {\n          amplitude.track(DEFAULT_FORM_START_EVENT, {\n            [FORM_ID]: form.id,\n            [FORM_NAME]: stringOrUndefined(form.name),\n            [FORM_DESTINATION]: form.action,\n          });\n        }\n\n        amplitude.track(DEFAULT_FORM_SUBMIT_EVENT, {\n          [FORM_ID]: form.id,\n          [FORM_NAME]: stringOrUndefined(form.name),\n          [FORM_DESTINATION]: form.action,\n        });\n        hasFormChanged = false;\n      });\n    };\n\n    // Adds listener to existing anchor tags\n    const forms = Array.from(document.getElementsByTagName('form'));\n    forms.forEach(addFormInteractionListener);\n\n    // Adds listener to anchor tags added after initial load\n    /* istanbul ignore else */\n    if (typeof MutationObserver !== 'undefined') {\n      observer = new MutationObserver((mutations) => {\n        mutations.forEach((mutation) => {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeName === 'FORM') {\n              addFormInteractionListener(node as HTMLFormElement);\n            }\n            if ('querySelectorAll' in node && typeof node.querySelectorAll === 'function') {\n              Array.from(node.querySelectorAll('form') as HTMLFormElement[]).map(addFormInteractionListener);\n            }\n          });\n        });\n      });\n\n      observer.observe(document.body, {\n        subtree: true,\n        childList: true,\n      });\n    }\n  };\n  const execute = async (event: Event) => event;\n  const teardown = async () => {\n    observer?.disconnect();\n    removeClickListeners();\n  };\n\n  return {\n    name,\n    type,\n    setup,\n    execute,\n    teardown,\n  };\n};\n\nexport const stringOrUndefined = <T>(name: T): T extends string ? string : undefined => {\n  /* istanbul ignore if */\n  if (typeof name !== 'string') {\n    // We found instances where the value of `name` is an Element and not a string.\n    // Elements may have circular references and would throw an error when passed to `JSON.stringify(...)`.\n    // If a non-string value is seen, assume there is no value.\n    return undefined as T extends string ? string : undefined;\n  }\n\n  return name as T extends string ? string : undefined;\n};\n"]}