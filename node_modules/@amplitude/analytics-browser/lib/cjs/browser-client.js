Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplitudeBrowser = void 0;
var tslib_1 = require("tslib");
var analytics_core_1 = require("@amplitude/analytics-core");
var analytics_client_common_1 = require("@amplitude/analytics-client-common");
var snippet_helper_1 = require("./utils/snippet-helper");
var context_1 = require("./plugins/context");
var config_1 = require("./config");
var plugin_web_attribution_browser_1 = require("@amplitude/plugin-web-attribution-browser");
var plugin_page_view_tracking_browser_1 = require("@amplitude/plugin-page-view-tracking-browser");
var form_interaction_tracking_1 = require("./plugins/form-interaction-tracking");
var file_download_tracking_1 = require("./plugins/file-download-tracking");
var constants_1 = require("./constants");
var det_notification_1 = require("./det-notification");
var AmplitudeBrowser = /** @class */ (function (_super) {
    tslib_1.__extends(AmplitudeBrowser, _super);
    function AmplitudeBrowser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AmplitudeBrowser.prototype.init = function (apiKey, userIdOrOptions, maybeOptions) {
        if (apiKey === void 0) { apiKey = ''; }
        var userId;
        var options;
        if (arguments.length > 2) {
            userId = userIdOrOptions;
            options = maybeOptions;
        }
        else {
            if (typeof userIdOrOptions === 'string') {
                userId = userIdOrOptions;
                options = undefined;
            }
            else {
                userId = userIdOrOptions === null || userIdOrOptions === void 0 ? void 0 : userIdOrOptions.userId;
                options = userIdOrOptions;
            }
        }
        return (0, analytics_core_1.returnWrapper)(this._init(tslib_1.__assign(tslib_1.__assign({}, options), { userId: userId, apiKey: apiKey })));
    };
    AmplitudeBrowser.prototype._init = function (options) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var browserOptions, connector, attributionTrackingOptions, webAttribution;
            var _this = this;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        // Step 1: Block concurrent initialization
                        if (this.initializing) {
                            return [2 /*return*/];
                        }
                        this.initializing = true;
                        return [4 /*yield*/, (0, config_1.useBrowserConfig)(options.apiKey, options, this)];
                    case 1:
                        browserOptions = _c.sent();
                        return [4 /*yield*/, _super.prototype._init.call(this, browserOptions)];
                    case 2:
                        _c.sent();
                        // Step 3: Set session ID
                        // Priority 1: `options.sessionId`
                        // Priority 2: last known sessionId from user identity storage
                        // Default: `Date.now()`
                        // Session ID is handled differently than device ID and user ID due to session events
                        this.setSessionId((_b = (_a = options.sessionId) !== null && _a !== void 0 ? _a : this.config.sessionId) !== null && _b !== void 0 ? _b : Date.now());
                        connector = (0, analytics_client_common_1.getAnalyticsConnector)(options.instanceName);
                        connector.identityStore.setIdentity({
                            userId: this.config.userId,
                            deviceId: this.config.deviceId,
                        });
                        // Step 4: Install plugins
                        // Do not track any events before this
                        return [4 /*yield*/, this.add(new analytics_core_1.Destination()).promise];
                    case 3:
                        // Step 4: Install plugins
                        // Do not track any events before this
                        _c.sent();
                        return [4 /*yield*/, this.add(new context_1.Context()).promise];
                    case 4:
                        _c.sent();
                        return [4 /*yield*/, this.add(new analytics_client_common_1.IdentityEventSender()).promise];
                    case 5:
                        _c.sent();
                        // Notify if DET is enabled
                        (0, det_notification_1.detNotify)(this.config);
                        if (!(0, analytics_client_common_1.isFileDownloadTrackingEnabled)(this.config.defaultTracking)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this.add((0, file_download_tracking_1.fileDownloadTracking)()).promise];
                    case 6:
                        _c.sent();
                        _c.label = 7;
                    case 7:
                        if (!(0, analytics_client_common_1.isFormInteractionTrackingEnabled)(this.config.defaultTracking)) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.add((0, form_interaction_tracking_1.formInteractionTracking)()).promise];
                    case 8:
                        _c.sent();
                        _c.label = 9;
                    case 9:
                        if (!(0, analytics_client_common_1.isAttributionTrackingEnabled)(this.config.defaultTracking)) return [3 /*break*/, 11];
                        attributionTrackingOptions = (0, analytics_client_common_1.getAttributionTrackingConfig)(this.config);
                        webAttribution = (0, plugin_web_attribution_browser_1.webAttributionPlugin)(attributionTrackingOptions);
                        return [4 /*yield*/, this.add(webAttribution).promise];
                    case 10:
                        _c.sent();
                        _c.label = 11;
                    case 11: 
                    // Add page view plugin
                    return [4 /*yield*/, this.add((0, plugin_page_view_tracking_browser_1.pageViewTrackingPlugin)((0, analytics_client_common_1.getPageViewTrackingConfig)(this.config))).promise];
                    case 12:
                        // Add page view plugin
                        _c.sent();
                        this.initializing = false;
                        // Step 6: Run queued dispatch functions
                        return [4 /*yield*/, this.runQueuedFunctions('dispatchQ')];
                    case 13:
                        // Step 6: Run queued dispatch functions
                        _c.sent();
                        // Step 7: Add the event receiver after running remaining queued functions.
                        connector.eventBridge.setEventReceiver(function (event) {
                            void _this.track(event.eventType, event.eventProperties);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    AmplitudeBrowser.prototype.getUserId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.userId;
    };
    AmplitudeBrowser.prototype.setUserId = function (userId) {
        if (!this.config) {
            this.q.push(this.setUserId.bind(this, userId));
            return;
        }
        if (userId !== this.config.userId || userId === undefined) {
            this.config.userId = userId;
            (0, analytics_client_common_1.setConnectorUserId)(userId, this.config.instanceName);
        }
    };
    AmplitudeBrowser.prototype.getDeviceId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.deviceId;
    };
    AmplitudeBrowser.prototype.setDeviceId = function (deviceId) {
        if (!this.config) {
            this.q.push(this.setDeviceId.bind(this, deviceId));
            return;
        }
        this.config.deviceId = deviceId;
        (0, analytics_client_common_1.setConnectorDeviceId)(deviceId, this.config.instanceName);
    };
    AmplitudeBrowser.prototype.reset = function () {
        this.setDeviceId((0, analytics_core_1.UUID)());
        this.setUserId(undefined);
    };
    AmplitudeBrowser.prototype.getSessionId = function () {
        var _a;
        return (_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionId;
    };
    AmplitudeBrowser.prototype.setSessionId = function (sessionId) {
        var _a;
        if (!this.config) {
            this.q.push(this.setSessionId.bind(this, sessionId));
            return;
        }
        // Prevents starting a new session with the same session ID
        if (sessionId === this.config.sessionId) {
            return;
        }
        var previousSessionId = this.getSessionId();
        var lastEventTime = this.config.lastEventTime;
        var lastEventId = (_a = this.config.lastEventId) !== null && _a !== void 0 ? _a : -1;
        this.config.sessionId = sessionId;
        this.config.lastEventTime = undefined;
        if ((0, analytics_client_common_1.isSessionTrackingEnabled)(this.config.defaultTracking)) {
            if (previousSessionId && lastEventTime) {
                this.track(constants_1.DEFAULT_SESSION_END_EVENT, undefined, {
                    device_id: this.previousSessionDeviceId,
                    event_id: ++lastEventId,
                    session_id: previousSessionId,
                    time: lastEventTime + 1,
                    user_id: this.previousSessionUserId,
                });
            }
            this.config.lastEventTime = this.config.sessionId;
            this.track(constants_1.DEFAULT_SESSION_START_EVENT, undefined, {
                event_id: ++lastEventId,
                session_id: this.config.sessionId,
                time: this.config.lastEventTime,
            });
        }
        this.previousSessionDeviceId = this.config.deviceId;
        this.previousSessionUserId = this.config.userId;
    };
    AmplitudeBrowser.prototype.extendSession = function () {
        if (!this.config) {
            this.q.push(this.extendSession.bind(this));
            return;
        }
        this.config.lastEventTime = Date.now();
    };
    AmplitudeBrowser.prototype.setTransport = function (transport) {
        if (!this.config) {
            this.q.push(this.setTransport.bind(this, transport));
            return;
        }
        this.config.transportProvider = (0, config_1.createTransport)(transport);
    };
    AmplitudeBrowser.prototype.identify = function (identify, eventOptions) {
        if ((0, snippet_helper_1.isInstanceProxy)(identify)) {
            var queue = identify._q;
            identify._q = [];
            identify = (0, snippet_helper_1.convertProxyObjectToRealObject)(new analytics_core_1.Identify(), queue);
        }
        if (eventOptions === null || eventOptions === void 0 ? void 0 : eventOptions.user_id) {
            this.setUserId(eventOptions.user_id);
        }
        if (eventOptions === null || eventOptions === void 0 ? void 0 : eventOptions.device_id) {
            this.setDeviceId(eventOptions.device_id);
        }
        return _super.prototype.identify.call(this, identify, eventOptions);
    };
    AmplitudeBrowser.prototype.groupIdentify = function (groupType, groupName, identify, eventOptions) {
        if ((0, snippet_helper_1.isInstanceProxy)(identify)) {
            var queue = identify._q;
            identify._q = [];
            identify = (0, snippet_helper_1.convertProxyObjectToRealObject)(new analytics_core_1.Identify(), queue);
        }
        return _super.prototype.groupIdentify.call(this, groupType, groupName, identify, eventOptions);
    };
    AmplitudeBrowser.prototype.revenue = function (revenue, eventOptions) {
        if ((0, snippet_helper_1.isInstanceProxy)(revenue)) {
            var queue = revenue._q;
            revenue._q = [];
            revenue = (0, snippet_helper_1.convertProxyObjectToRealObject)(new analytics_core_1.Revenue(), queue);
        }
        return _super.prototype.revenue.call(this, revenue, eventOptions);
    };
    AmplitudeBrowser.prototype.process = function (event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentTime, isEventInNewSession;
            return tslib_1.__generator(this, function (_a) {
                currentTime = Date.now();
                isEventInNewSession = (0, analytics_client_common_1.isNewSession)(this.config.sessionTimeout, this.config.lastEventTime);
                if (event.event_type !== constants_1.DEFAULT_SESSION_START_EVENT &&
                    event.event_type !== constants_1.DEFAULT_SESSION_END_EVENT &&
                    (!event.session_id || event.session_id === this.getSessionId()) &&
                    isEventInNewSession) {
                    this.setSessionId(currentTime);
                }
                return [2 /*return*/, _super.prototype.process.call(this, event)];
            });
        });
    };
    return AmplitudeBrowser;
}(analytics_core_1.AmplitudeCore));
exports.AmplitudeBrowser = AmplitudeBrowser;
//# sourceMappingURL=browser-client.js.map