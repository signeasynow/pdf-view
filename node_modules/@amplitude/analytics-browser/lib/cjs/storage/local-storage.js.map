{"version":3,"file":"local-storage.js","sourceRoot":"","sources":["../../../src/storage/local-storage.ts"],"names":[],"mappings":";;;AAAA,8EAAoE;AACpE,qDAAmD;AAGnD,IAAM,gBAAgB,GAAG,IAAI,CAAC;AAK9B;IAAqC,wCAAiB;IAGpD,sBAAY,MAA4B;QAAxC,iBAGC;;gBAFC,kBAAM,MAAA,IAAA,wCAAc,GAAE,0CAAE,YAAY,CAAC;QACrC,KAAI,CAAC,cAAc,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,cAAc,CAAC;;IAC/C,CAAC;IAEK,0BAAG,GAAT,UAAU,GAAW,EAAE,KAAQ;;;;;;;6BACzB,CAAA,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAA,EAAvD,wBAAuD;wBACnD,kBAAkB,GAAG,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAC;wBAC3D,qBAAM,iBAAM,GAAG,YAAC,GAAG,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,gBAAgB,CAAM,CAAC,EAAA;;wBAA3D,SAA2D,CAAC;wBAC5D,MAAA,IAAI,CAAC,cAAc,0CAAE,KAAK,CACxB,yBAAkB,kBAAkB,uDAA6C,gBAAgB,MAAG,CACrG,CAAC;;4BAEF,qBAAM,iBAAM,GAAG,YAAC,GAAG,EAAE,KAAK,CAAC,EAAA;;wBAA3B,SAA2B,CAAC;;;;;;KAE/B;IACH,mBAAC;AAAD,CAAC,AAnBD,CAAqC,gCAAc,GAmBlD;AAnBY,oCAAY","sourcesContent":["import { getGlobalScope } from '@amplitude/analytics-client-common';\nimport { BrowserStorage } from './browser-storage';\nimport { Logger } from '@amplitude/analytics-types';\n\nconst MAX_ARRAY_LENGTH = 1000;\n\ninterface LocalStorageOptions {\n  loggerProvider?: Logger;\n}\nexport class LocalStorage<T> extends BrowserStorage<T> {\n  loggerProvider?: Logger;\n\n  constructor(config?: LocalStorageOptions) {\n    super(getGlobalScope()?.localStorage);\n    this.loggerProvider = config?.loggerProvider;\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    if (Array.isArray(value) && value.length > MAX_ARRAY_LENGTH) {\n      const droppedEventsCount = value.length - MAX_ARRAY_LENGTH;\n      await super.set(key, value.slice(0, MAX_ARRAY_LENGTH) as T);\n      this.loggerProvider?.error(\n        `Failed to save ${droppedEventsCount} events because the queue length exceeded ${MAX_ARRAY_LENGTH}.`,\n      );\n    } else {\n      await super.set(key, value);\n    }\n  }\n}\n"]}